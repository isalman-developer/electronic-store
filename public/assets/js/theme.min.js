"use strict";
! function () {
    document.querySelectorAll(".dropdown-menu a.dropdown-toggle").forEach((function (e) {
        e.addEventListener("click", (function (e) {
            if (!this.nextElementSibling.classList.contains("show")) {
                this.closest(".dropdown-menu").querySelectorAll(".show").forEach((function (e) {
                    e.classList.remove("show")
                }))
            }
            this.nextElementSibling.classList.toggle("show");
            const t = this.closest("li.nav-item.dropdown.show");
            t && t.addEventListener("hidden.bs.dropdown", (function (e) {
                document.querySelectorAll(".dropdown-submenu .show").forEach((function (e) {
                    e.classList.remove("show")
                }))
            })), e.stopPropagation()
        }))
    }));
    var e = document.querySelectorAll('[data-bs-toggle="tooltip"]');
    e.length && e.forEach((function (e) {
        new bootstrap.Tooltip(e)
    }));
    var t = document.querySelectorAll('[data-bs-toggle="popover"]');
    t.length && t.forEach((function (e) {
        new bootstrap.Popover(e)
    })), document.querySelectorAll(".rater").forEach((function (e, t) {
        raterJs({
            starSize: 20,
            element: e,
            rateCallback: function (e, t) {
                this.setRating(e), t()
            }
        })
    }));
    var n = document.getElementById("priceRange");
    if (n) {
        noUiSlider.create(n, {
            connect: !0,
            behaviour: "tap",
            start: [49, 199],
            range: {
                min: [6],
                max: [300]
            }
        });
        var a = document.getElementById("priceRange-value");
        n.noUiSlider.on("update", (function (e) {
            a.innerHTML = `<span class="price-min border py-1 px-3">${e[0]}</span>  <span class="price-max border py-1 px-3">${e[1]}</span>`
        }))
    }
    var o = document.getElementById("collapseContent");
    o && document.getElementById("toggleButton").addEventListener("click", (function () {
        o.addEventListener("shown.bs.collapse", (function () {
            document.getElementById("toggleButton").style.display = "none"
        }))
    }))
}();
var navbar = document.querySelector(".navbar");
const navOffCanvasBtn = document.querySelectorAll(".offcanvas-nav-btn"),
    navOffCanvas = document.querySelector(".navbar:not(.navbar-clone) .offcanvas-nav");
let bsOffCanvas;

function toggleOffCanvas() {
    bsOffCanvas && bsOffCanvas._isShown ? bsOffCanvas.hide() : bsOffCanvas && bsOffCanvas.show()
}

function initializeSwiperCarousels() {
    document.querySelectorAll(".swiper-container").forEach((e => {
        const t = e.getAttribute("data-speed") || 400,
            n = e.getAttribute("data-space-between") || 20,
            a = "true" === e.getAttribute("data-pagination"),
            o = "true" === e.getAttribute("data-navigation"),
            s = "true" === e.getAttribute("data-autoplay"),
            r = e.getAttribute("data-autoplay-delay") || 3e3,
            i = e.getAttribute("data-pagination-type") || "bullets",
            l = "true" === e.getAttribute("data-center-slides"),
            c = e.getAttribute("data-effect") || "slide",
            d = "true" === e.getAttribute("data-thumbs");
        let u = {};
        const f = e.getAttribute("data-breakpoints");
        if (f) try {
            u = JSON.parse(f)
        } catch (e) {
            console.error("Error parsing breakpoints data:", e)
        }
        const p = {
            speed: parseInt(t),
            spaceBetween: parseInt(n),
            breakpoints: u,
            slidesPerView: "auto",
            effect: c
        };
        if ("fade" === c && (p.fadeEffect = {
            crossFade: !0
        }), l && (p.slidesPerView = "auto", p.centeredSlides = !0), a) {
            const t = e.querySelector(".swiper-pagination");
            t && (p.pagination = {
                el: t,
                type: i,
                dynamicBullets: !1,
                clickable: !0
            })
        }
        let v;
        if (o && (p.navigation = {
            nextEl: ".swiper-button-next",
            prevEl: ".swiper-button-prev"
        }), s && (p.autoplay = {
            delay: parseInt(r)
        }), d) {
            const t = e.nextElementSibling;
            t && t.classList.contains("swiper-thumbs") && (v = new Swiper(t, {
                spaceBetween: 10,
                slidesPerView: 4,
                freeMode: !0,
                watchSlidesProgress: !0
            }), p.thumbs = {
                swiper: v
            })
        }
        new Swiper(e, p)
    }))
}
navOffCanvas && (bsOffCanvas = new bootstrap.Offcanvas(navOffCanvas, {
    scroll: !0
}), navOffCanvasBtn.forEach((e => {
    e.addEventListener("click", (e => {
        toggleOffCanvas()
    }))
}))), initializeSwiperCarousels();
var modalElement = document.getElementById("quickViewModal");
modalElement && modalElement.addEventListener("shown.bs.modal", (function () {
    initializeSwiperCarousels()
}));
